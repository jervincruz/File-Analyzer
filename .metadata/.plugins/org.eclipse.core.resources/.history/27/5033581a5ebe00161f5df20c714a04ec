package file_analyzer;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.swing.JFileChooser;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;

// Our regular controller. See the fA package for testing and debug codes
public class FileAnalyzerController {

	private File _file;
	private FileAnalyzerView _view;
	private String[] _asciiArray;
	private ArrayList<String> _uniqueCharacters;
	private String _outputString = "";
	private String _uncommonCharacter = "";
	private String _uncommonTitle = "";
	private ArrayList<ArrayList<FileAnalyzerStringPairs>> _stringPairs;

	public FileAnalyzerController(FileAnalyzerView view) {
		_view = view;
		_view.setController(this);
	}

	public File getFile() {
		return _file;
	}
	
	// Opens the file then runs the various method of our algorithm and
	// displays the result on the GUI
	public void openFile(JFileChooser fileChooser) {
		int returnVal = fileChooser.showOpenDialog(_view);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			_file = fileChooser.getSelectedFile();

			_view.getFileLabel().setText(_file.getName());

			String tempString = convertToBinary(_file);
			_asciiArray = binaryToAscii(tempString);
			_asciiArray = removeWhiteSpace(_asciiArray);
			tempString = asciiArrayToString(_asciiArray);
			tempString = "File to Ascii:" + lineSplit() + "\n" + tempString;
			tempString = tempString + lineSplit();

			String tempString2 = cipherString(_asciiArray, _view.matrixSize());
			_asciiArray = stringToArray(tempString2);
			tempString = tempString + "\nReplaced all uncommon ascii characters with one character:" + "\n" + _uncommonTitle + "\nReplaced with: " + _uncommonCharacter + lineSplit() + "\n" + tempString2 + lineSplit();

			HashMap<String, String> randomAsciiHashMap = randomAsciiHashMap();
			tempString = tempString + "\nOur Randomized Ascii Hashmap:" + lineSplit() + "\n" + hashMapToStringArray(randomAsciiHashMap) + lineSplit();

			_asciiArray = arrToRandom(randomAsciiHashMap, _asciiArray);
			String finalasciiArrayString = asciiArrayToString(_asciiArray);
			_uniqueCharacters = gatherUniqueCharacters(_asciiArray);
			String[] myArray = _uniqueCharacters.toArray(new String[_uniqueCharacters.size()]);
			_stringPairs = makeStringPairs(myArray, finalasciiArrayString);
			String stringMatrix = printOutMatrix(_stringPairs);
			tempString = tempString + "\nOur New Ascii String with replaced random values:" + lineSplit() + "\n" + finalasciiArrayString;
			tempString = tempString + lineSplit();
			tempString = tempString + "\nOur matrix of string pairs with its ocurrences count:" + lineSplit() + "\n";
			tempString = tempString + stringMatrix;
			
			_stringPairs = sumNDivide(_stringPairs);
			tempString += lineSplit();
			tempString = tempString + "\nOur matrix of string pairs with its occurrences count divided by the sum of the row:" + lineSplit() + "\n";
			tempString = tempString + printOutMatrix(_stringPairs);
			
			_outputString = tempString;
			

			_view.getTextArea().setText(_outputString);
		}

	}
	
	// Used occasionally to add a separator on our GUI window to separate
	// parts of the code
	private String lineSplit() {
		return "\n=============================================================";
	}
	
	// Goes through a string array and remove any elements
	// that happens to be a newline, space, other other
	// invisible special characters. Then shifts the array up
	private String[] removeWhiteSpace(String[] stringArr) {
		ArrayList<String> tempStringArrayList = new ArrayList<>();
		String valD;
		for (int i = 0; i < stringArr.length; i ++) {
			char tempString = stringArr[i].charAt(0);

			if (Character.isWhitespace(tempString))
				switch (tempString) {
				case '\t':
					valD = "\t";
					break;
				case ' ':
					valD = " ";
					break;
				case '\n':
					valD = "\n";
					break;
				case '\r':
					valD = "\r";
					break;
				case '\f':
					valD = "\f";
					break;
				default:
					valD = " ";
					break;
				} else if (Character.isISOControl(tempString)) {
					valD = "";
				} else {
					valD = Character.toString(tempString);
					tempStringArrayList.add(valD);
				}
			//tempStringArrayList.add(valD);
		}
		String returnArray[] = new String[tempStringArrayList.size()];
		returnArray = tempStringArrayList.toArray(returnArray);
		return returnArray;
	}
	
	// Reads in a file 8 bit at a time and convert it to 0 or 1.
	// Appends these 0s and 1s to a string that gets returned in the
	// end
	private String convertToBinary(File file) {
		byte[] encoded = null;
		// Assertion. Makes sure the file being read is valid before moving on
		try {
			encoded = Files.readAllBytes(Paths.get(file.getAbsolutePath()));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("Error. Check if file is in correct format.");
		}
		if (encoded == null) {
			throw new AssertionError("Error. Unable to read the path of the file.");
		}
		String tempString = new String(encoded, Charset.defaultCharset());

		byte[] bytes = tempString.getBytes();
		StringBuilder binary = new StringBuilder();
		for (byte b : bytes) {
			int val = b;
			for (int i = 0; i < 8; i++) {
				binary.append((val & 128) == 0 ? 0 : 1);
				val <<= 1;
			}
		}
		return binary.toString();
	}
	
	// Takes in a full array of strings and return a trimmed down
	// array with only unique characters
	private ArrayList<String> gatherUniqueCharacters(String[] asciiArray) {
		ArrayList<String> temp = new ArrayList<>();
		for (int i = 0; i < asciiArray.length; i++) {
			if (!temp.contains(asciiArray[i])) {
				temp.add(asciiArray[i]);
			}
		}
		return temp;
	}
	
	// Reads in sequences of 0s and 1s that are stored in
	// a string. Each sequence is 8 characters long and the
	// corresponding ascii representation of that sequence is stored in
	// a new index of a string array. This array is returned in the end
	private String[] binaryToAscii(String s) {
		int arrayLength = (int) Math.ceil(((s.length() / (double)8)));
		String[] result = new String[arrayLength];

		int j = 0;
		int lastIndex = result.length - 1;
		for (int i = 0; i < lastIndex; i++) {
			result[i] = s.substring(j, j + 8);
			j += 8;
		}
		String lastString = s.substring(j);
		StringBuilder sb = new StringBuilder();
		if (lastString.length() < 9) {
			int rest = 9 - lastString.length();
			for(int i = 1; i < rest; i++) {
				sb.append("0");
			}
			sb.append(lastString);
		}
		result[lastIndex] = sb.toString();
		StringBuilder sb2 = new StringBuilder();
		for (int i = 0; i < result.length; i++) {
			int charCode = Integer.parseInt(result[i], 2);
			sb2.append(new Character((char)charCode).toString());
		}
		String stringWithNonAscii = sb2.toString();
		String stringWithOnlyAscii = stringWithNonAscii.replaceAll("[^\\x00-\\x7F]", "");
		return stringToArray(stringWithOnlyAscii);
	}
	
	// Converts an array that holds strings to one long string
	private String asciiArrayToString(String[] asciiArray) {
		StringBuilder sb = new StringBuilder();
		for (String e : asciiArray) {
			sb.append(e);
		}
		return sb.toString();
	}

	private String hashMapToStringArray(HashMap<String, String> randomAsciiHashMap) {
		StringBuilder sb = new StringBuilder();
		Set<String> keySet = randomAsciiHashMap.keySet();
		Iterator<String> keySetIterator = keySet.iterator();
		while (keySetIterator.hasNext()) {
			String key = keySetIterator.next();
			key = key + " = " + randomAsciiHashMap.get(key);
			if (keySetIterator.hasNext()) {
				key = key + "\n";
			}
			sb.append(key);
		}
		return sb.toString();
	}
	
	// Compares a small string to the full string and count
	// how many time that small string occurs in the full string
	// and return that value
	public int countOcurrences(String fullString, String subString) {
		// Assertion. Checks if substring is shorter than full string
		if (subString.length() > fullString.length()) {
			throw new AssertionError("The substring is longer than the string it is being compared to.");
		}
		int lastIndex = 0;
		int count = 0;

		while (lastIndex != -1) {

			lastIndex = fullString.indexOf(subString,lastIndex);

			if (lastIndex != -1) {
				count ++;
				lastIndex += subString.length();
			}
		}
		return count;
	}
	
	// Makes a 2D array. An array of arrays of FileAnalyzerStringPairs.
	// The size of the array is based on the size of the string array argument
	// which at this point should be a string array of unique characters.
	// A string pair combination is created from this array and its occurrences
	// is counted in fullString. This number is stored in the array.
	private ArrayList<ArrayList<FileAnalyzerStringPairs>> makeStringPairs(String[] asciiArray, String fullString) {
		ArrayList<ArrayList<FileAnalyzerStringPairs>> temp = new ArrayList<ArrayList<FileAnalyzerStringPairs>>();
		for (int i = 0; i < asciiArray.length; i++) {
			temp.add(new ArrayList<FileAnalyzerStringPairs>());
		}
		for (int i = 0; i < asciiArray.length; i++) {
			ArrayList<FileAnalyzerStringPairs> currentLetter = temp.get(i);
			for (int j = 0; j < asciiArray.length; j++) {
				String tempPairString = asciiArray[i]+asciiArray[j];
				FileAnalyzerStringPairs currentTempPair = new FileAnalyzerStringPairs(tempPairString, countOcurrences(fullString, tempPairString));
				currentLetter.add(currentTempPair);
				System.out.println(currentTempPair);
			}
		}
		return temp;
	}
	
	private ArrayList<ArrayList<FileAnalyzerStringPairs>> sumNDivide(ArrayList<ArrayList<FileAnalyzerStringPairs>> stringPairsArray) {		
		double sum = 0;
		double div = 0;
		
		for (int i = 0; i < stringPairsArray.size(); i++) {
			for (int j = 0; j < stringPairsArray.get(i).size(); j++) {
				sum += stringPairsArray.get(i).get(j).getSumOccurrences();
			}			
			for (int k = 0; k < stringPairsArray.get(i).size(); k++) {
				if (stringPairsArray.get(i).get(k).getSumOccurrences() != 0) div = stringPairsArray.get(i).get(k).getSumOccurrences() / sum;
				else div = 0.0;
				stringPairsArray.get(i).set(k, new FileAnalyzerStringPairs(stringPairsArray.get(i).get(k).getPair(), div));
			}
			sum = 0;
		}
		
		return stringPairsArray;
	}
	
	// Used to print out our 2D array to the GUI in a readable format
	private String printOutMatrix(ArrayList<ArrayList<FileAnalyzerStringPairs>> stringPairsArray) {
		String returnString = "";
		boolean first = true;
		for (int i = 0; i < stringPairsArray.size(); i++) {
			if (!first) {
				returnString = returnString + "\n";
			}
			ArrayList<FileAnalyzerStringPairs> ourPairArray = stringPairsArray.get(i);
			for (int j = 0; j < ourPairArray.size(); j ++) {
				returnString = returnString + ourPairArray.get(j);
			}
			if (first) {
				first = false;
			}
		}
		return returnString;
	}

	// Jervin
	/** cipherString function: Takes the file's converted ASCII characters and gets
	 *  the user chosen cutoff for most significant symbols
	 *  significant  **/
	public String cipherString(String [] symbolsArr, int uniqueCutoff) {
		HashMap<String, Integer> symbolsFrequency = new HashMap<>();
		String cipher = "";
		int counter = 0;

		// Keep track of number of symbols
		for (int i = 0; i < symbolsArr.length; i++){
			if(symbolsFrequency.containsKey(symbolsArr[i])){
				counter = symbolsFrequency.get(symbolsArr[i]);
				symbolsFrequency.put(symbolsArr[i], ++counter);
			}
			else{
				symbolsFrequency.put(symbolsArr[i],1);
			}
		}

		// Print whole string
		for(int i = 0; i < symbolsArr.length; i++){
			cipher += symbolsArr[i];
		}
		System.out.println(cipher);
		for(String s : symbolsFrequency.keySet()){
			System.out.println("Symbol: " + s.toString() + " Frequency:" + symbolsFrequency.get(s));
		}

		// Frequency
		Set<Integer> ss = new TreeSet<>();

		int k = 0;
		// Store Symbol Frequency
		for(String s : symbolsFrequency.keySet()){
			ss.add(symbolsFrequency.get(s));
		}	

		int [] symbolValues = new int[ss.size()];
		for(Integer s : ss){
			symbolValues[k++] = s;
		}

		// Sort
		quickSort(symbolValues, 0, symbolValues.length - 1);

		// Get key of value in sorted array, print out values
		for(int i = 0; i < symbolValues.length; i++){
			System.out.print(symbolValues[i] + " ");
		}

		// Replace uncommon values with a randomized uncommon symbol starting from the cutoff point
		cipher = "";
		int cutoff = 0;
		Stack<String> uniqueSymbols = new Stack();

		for(String key : symbolsFrequency.keySet()){
			if(cutoff == uniqueCutoff)
				break;
			else{
				uniqueSymbols.push(key);
				cutoff++;
			}
		}
		System.out.print("\nUnique Symbols: ");
		System.out.print(uniqueSymbols);

		// Get a random symbol from the cutoff [set of uncommon symbols]
		Random rand = new Random();
		int uncommonCounter = 0;
		int randomUncommon = 0;
		String [] uncommons;
		if (symbolsFrequency.size() < uniqueCutoff) {
			uncommons = new String[symbolsFrequency.size()];
		}
		else {
			uncommons = new String[symbolsFrequency.size() - uniqueCutoff];
		}
		int j = 0;
		String chosenUncommon = "";
		_uncommonTitle = "Uncommons: ";
		System.out.print("\nUncommons: ");
		for(String s : symbolsFrequency.keySet()){
			uncommonCounter++;
			if(uncommonCounter > uniqueCutoff){
				uncommons[j] = s;
				System.out.print(uncommons[j]);
				_uncommonTitle = _uncommonTitle + uncommons[j];
				j++;
			}
		}
		randomUncommon = rand.nextInt(uncommons.length);
		chosenUncommon = uncommons[randomUncommon];
		_uncommonCharacter = uncommons[randomUncommon];

		System.out.println("Chosen Uncommon: " + chosenUncommon);
		// Iterate through original string array; if most occurring symbol not in array, replace
		for(int i = 0; i < symbolsArr.length; i++){
			if(!uniqueSymbols.contains(symbolsArr[i])){
				symbolsArr[i] = chosenUncommon;
				cipher+=symbolsArr[i];
			}
			else{
				cipher+= symbolsArr[i];
			}
		}

		System.out.println(cipher);
		return cipher;
	}

	static void quickSort(int [] arr, int low, int high){
		if(arr == null || arr.length == 0)
			return;
		if(low >= high)
			return;

		int middle = low + (high - low) / 2;
		int pivot = arr[middle];

		int i = low;
		int j = high;

		while (i <= j){
			while(arr[i] > pivot){
				i++;
			}
			while(arr[j] < pivot){
				j--;
			}

			if(i <= j){
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				i++;
				j--;
			}
		}
		// Sort from greatest to least
		if(low < j)
			quickSort(arr, low, j);
		if(high > i)
			quickSort(arr, i, high);
	}
	
	// Takes in a hashmap that has characters it would replace. Goes through a
	// string array and replace all values in it based on that hashmap
	private String[] arrToRandom(HashMap<String, String> randomAsciiHashMap, String[] outputArr) {
		StringBuilder sb = new StringBuilder();
		String key;
		for (int i = 0; i < outputArr.length; i++) {
			if (!outputArr[i].matches("\\s")) {
				key = randomAsciiHashMap.get(outputArr[i]);
				if (key != null) {
					sb.append(key);
				}
			}
		}
		String tempString = sb.toString();
		return stringToArray(tempString);
	}
	
	// Converts a regular string to a string array. Each index
	// holds one character
	private String[] stringToArray(String tempString) {
		return tempString.split("(?!^)");
	}
	
	// Generates a randomized hashmap that represents one ascii
	// character with another
	private HashMap<String, String> randomAsciiHashMap() {
		HashMap<String, String> hMap = new HashMap<String, String>();
		ArrayList<String> randomAscii = new ArrayList<>();
		ArrayList<String> nonRandom = new ArrayList<>();
		for (int i = 32; i < 127; i++) {
			char x = (char) i;
			if (!Character.isWhitespace(x)) {
				nonRandom.add( Character.toString(x));
			}
		}
		for (int i = 32; i < 127; i++) {
			char x = (char) i;
			if (!Character.isWhitespace(x)) {
				randomAscii.add( Character.toString(x));
			}
		}
		Collections.shuffle(randomAscii);
		for (int i = 0; i < nonRandom.size(); i ++) {
			hMap.put(nonRandom.get(i), randomAscii.get(i));
		}
		return hMap;
	}
	
	// Runs when the save file button is pushed. Pops up the GUI and
	// ask the user where to save the file
	public void saveFile(JFileChooser fileChooser) throws FileNotFoundException {
		int returnVal = fileChooser.showSaveDialog(_view);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			_file = fileChooser.getSelectedFile();
			String filePath = _file.getAbsolutePath();
			if (!filePath.endsWith(".txt")) {
				_file = new File(filePath + ".txt");
			}
			try (PrintStream out = new PrintStream(new FileOutputStream(_file))) {
				out.print(_outputString);
			}
		}
	}
	
	// Copy all the values in _outputString to the clipboard so the user can paste
	// the value somewhere else
	public void copyClipboard() {
		StringSelection strSelec = new StringSelection(_outputString);
		Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
		clpbrd.setContents(strSelec, null);
	}
}
